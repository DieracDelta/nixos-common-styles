// This component assumes it is used in an unmanaged layout.
//
// Basically, at body > main > .fullscreen-pane
//
// This only defines the basic unopinionated structure of the pane.
// All panes should have their own "component" implementing it.
// E.g. class="fullscreen-pane pane-foobar"
.fullscreen-pane {
  #fill-width();

  // These are *sensible defaults*, not absolutes.
  // Anyway there should be only one element, most of the time,
  // which most likely will have #container(); added.
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: stretch;
  align-content: stretch;

  position: relative;
  padding-top: @gutter * 4;
  padding-bottom: @gutter * 4;
  padding-left: 0;
  padding-right: 0;

  & > * {
    #container();
    position: relative;
    width: auto;

    // Okay defaults for panes.
    display: flex;
    flex-direction: column;
    align-items: center;
    align-content: center;
    justify-content: center;
  }

  .pane-close {
    @_size: @gutter * 3;

    position: absolute;
    height: @_size;
    width: @_size;

    top: -@_size;
    right: 0;

    #screen-sm-min({
      top: @gutter;
      right: -@gutter - @_size;
    });

    background-color: transparent;
    box-shadow: none;
    border: 0;
    padding: 0;
    text-indent: -999em;
    overflow: hidden;


    &::before, &::after {
      content: "";
      display: block;
      position: absolute;
      width: 100%;
      top: @_size/2;
      left: 0;
      border-top: 3*@unit solid transparent;
    }
    &::before {
      transform: rotate(45deg);
    }
    &::after {
      transform: rotate(-45deg);
    }
  }

}

#fullscreen-pane {
  .close-color(@color) {
    &.fullscreen-pane {
      .pane-close {
        &::before, &::after {
          border-top-color: @color;
        }
      }
    }
  }
}

#fullscreen-pane.close-color(#theme.color[gray-dark]);
