// Assumes structure is
//  <$root>
//    <div>
//      <ul>
//        <li></li>
//        <li></li>
//        <li></li>
//      </ul>
//    </div>
//  <$root>
//
// Where `$root` is where this mixin is used; any selector works.
// The `ul` can be used to set the content's width, allowing $root
// to take the full width if needed.
//
// Each $root>div>ul>li is an element, structured like so:
//
//  <li>
//    <* /> <!-- visual aid -->
//    <* /> <!-- contents -->
//  </li>
//
// The first element, of any kind, is the visual aid.
// The second element is the text contents. Wrap it.
// More than two direct child is an error.
//
// It is expected that the non-contentful visual aids are added through
// CSS replacement techniques. Use an empty element like an empty div,
// or use an `aside` if it semantically makes sense.
//
// When the visual aid is "contentful", meaning that it has semantic
// meaning in the context, it should be added to the DOM correctly.
//
// Note that you are *not* to alternate the order of the contents and
// the visual aid! This is done through CSS.
//
#gfx-alternating-side(@gfx-rules: {}) {
  #fill-width();
  & > * {
    #container();
  }

  & > div > h1 {
    text-align: center;
  }

  & > div > ul {
    margin: 0;
    padding: 0;
    margin-top: @gutter * 2;
    margin-bottom: @gutter * 2;
  }

  & > div > ul > li {
    list-style-type: none;
    display: flex;
    align-items: center;
    flex-direction: column;
    margin-bottom: @gutter;

    & > :first-child {
      #screen-sm-min({
        width: 33%;
      });
      flex-shrink: 0;
      @gfx-rules();
    }

    #screen-sm-min({
      flex-direction: row;

      & > :last-child {
        padding-left: @gutter;
      }

      &:nth-child(2n) {
        & > :first-child {
          order: 2;
        }
        & > :last-child {
          padding-left: 0;
          padding-right: @gutter;
        }
      }
    });
  }
}
